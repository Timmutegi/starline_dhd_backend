services:
  postgres:
    image: postgres:15-alpine
    container_name: starline_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-starline_db}
      POSTGRES_USER: ${POSTGRES_USER:-starline}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-@DM1N}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-starline} -d ${POSTGRES_DB:-starline_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - starline_network

  redis:
    image: redis:7-alpine
    container_name: starline_redis_dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - starline_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: starline_backend_dev
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432  # Override to use internal container port
      REDIS_HOST: redis
      REDIS_PORT: 6379  # Override to use internal container port
      ENVIRONMENT: development
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - starline_network
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Initializing database...' &&
        python -m app.init_db &&
        echo 'Starting FastAPI server in development mode...' &&
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: starline_pgadmin_dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@starline.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - starline_network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: starline_redis_commander_dev
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - starline_network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local

networks:
  starline_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16